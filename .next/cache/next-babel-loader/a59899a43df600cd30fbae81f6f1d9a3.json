{"ast":null,"code":"var _jsxFileName = \"/home/eduardo/projetos/covid/src/components/Chart/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport { chartThemes } from '../../config/themes.json';\nimport { useData } from '../../context/Data';\n\nfunction Chart(_ref) {\n  _s();\n\n  var data = _ref.data,\n      id = _ref.id,\n      type = _ref.type,\n      stacked = _ref.stacked;\n\n  var _useData = useData(),\n      theme = _useData.theme;\n\n  useEffect(function () {\n    if (!data) return function () {};\n    var infecteds = [];\n    var deads = [];\n    Object.keys(data).map(function (date) {\n      if (typeof data[date] === 'object') {\n        infecteds.push([date, data[date].infecteds]);\n        deads.push([date, data[date].deads]);\n      } else {\n        deads.push([date, data[date]]);\n      }\n    });\n    var opt = {\n      chart: {\n        type: type\n      },\n      title: {\n        text: ''\n      },\n      xAxis: {\n        type: 'category'\n      },\n      series: [{\n        name: 'Mortes',\n        data: deads\n      }]\n    };\n\n    if (infecteds.length > 0) {\n      opt.series.push({\n        name: 'Casos',\n        data: infecteds\n      });\n    }\n\n    if (stacked) {\n      opt.plotOptions = {\n        column: {\n          stacking: 'stream'\n        }\n      };\n    }\n\n    Highcharts.theme = chartThemes[theme];\n    Highcharts.setOptions(Highcharts.theme);\n    Highcharts.chart(id, opt);\n  }, [data, theme]);\n  return __jsx(\"div\", {\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  });\n}\n\n_s(Chart, \"N5lLYNuibHRO54ar4hQ1kfiPyIc=\", false, function () {\n  return [useData];\n});\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/home/eduardo/projetos/covid/src/components/Chart/index.js"],"names":["React","useEffect","Highcharts","chartThemes","useData","Chart","data","id","type","stacked","theme","infecteds","deads","Object","keys","map","date","push","opt","chart","title","text","xAxis","series","name","length","plotOptions","column","stacking","setOptions"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,OAAT,QAAwB,oBAAxB;;AAEA,SAASC,KAAT,OAA4C;AAAA;;AAAA,MAA3BC,IAA2B,QAA3BA,IAA2B;AAAA,MAArBC,EAAqB,QAArBA,EAAqB;AAAA,MAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AAAA,iBACzBL,OAAO,EADkB;AAAA,MACnCM,KADmC,YACnCA,KADmC;;AAG3CT,EAAAA,SAAS,CAAC,YAAM;AACf,QAAI,CAACK,IAAL,EAAW,OAAO,YAAM,CAAE,CAAf;AACX,QAAMK,SAAS,GAAG,EAAlB;AACA,QAAMC,KAAK,GAAG,EAAd;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYR,IAAZ,EAAkBS,GAAlB,CAAsB,UAACC,IAAD,EAAU;AAC/B,UAAI,OAAOV,IAAI,CAACU,IAAD,CAAX,KAAsB,QAA1B,EAAoC;AACnCL,QAAAA,SAAS,CAACM,IAAV,CAAe,CAACD,IAAD,EAAOV,IAAI,CAACU,IAAD,CAAJ,CAAWL,SAAlB,CAAf;AACAC,QAAAA,KAAK,CAACK,IAAN,CAAW,CAACD,IAAD,EAAOV,IAAI,CAACU,IAAD,CAAJ,CAAWJ,KAAlB,CAAX;AACA,OAHD,MAGO;AACNA,QAAAA,KAAK,CAACK,IAAN,CAAW,CAACD,IAAD,EAAOV,IAAI,CAACU,IAAD,CAAX,CAAX;AACA;AACD,KAPD;AASA,QAAME,GAAG,GAAG;AACXC,MAAAA,KAAK,EAAE;AACNX,QAAAA,IAAI,EAAEA;AADA,OADI;AAIXY,MAAAA,KAAK,EAAE;AACNC,QAAAA,IAAI,EAAE;AADA,OAJI;AAQXC,MAAAA,KAAK,EAAE;AACNd,QAAAA,IAAI,EAAE;AADA,OARI;AAYXe,MAAAA,MAAM,EAAE,CACP;AACCC,QAAAA,IAAI,EAAE,QADP;AAEClB,QAAAA,IAAI,EAAEM;AAFP,OADO;AAZG,KAAZ;;AAoBA,QAAID,SAAS,CAACc,MAAV,GAAmB,CAAvB,EAA0B;AACzBP,MAAAA,GAAG,CAACK,MAAJ,CAAWN,IAAX,CAAgB;AACfO,QAAAA,IAAI,EAAE,OADS;AAEflB,QAAAA,IAAI,EAAEK;AAFS,OAAhB;AAIA;;AAED,QAAIF,OAAJ,EAAa;AACZS,MAAAA,GAAG,CAACQ,WAAJ,GAAkB;AACjBC,QAAAA,MAAM,EAAE;AACPC,UAAAA,QAAQ,EAAE;AADH;AADS,OAAlB;AAKA;;AACD1B,IAAAA,UAAU,CAACQ,KAAX,GAAmBP,WAAW,CAACO,KAAD,CAA9B;AACAR,IAAAA,UAAU,CAAC2B,UAAX,CAAsB3B,UAAU,CAACQ,KAAjC;AACAR,IAAAA,UAAU,CAACiB,KAAX,CAAiBZ,EAAjB,EAAqBW,GAArB;AACA,GAlDQ,EAkDN,CAACZ,IAAD,EAAOI,KAAP,CAlDM,CAAT;AAmDA,SAAO;AAAK,IAAA,EAAE,EAAEH,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACA;;GAvDQF,K;UACUD,O;;;KADVC,K;AAyDT,eAAeA,KAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport { chartThemes } from '../../config/themes.json';\nimport { useData } from '../../context/Data';\n\nfunction Chart({ data, id, type, stacked }) {\n\tconst { theme } = useData();\n\n\tuseEffect(() => {\n\t\tif (!data) return () => {};\n\t\tconst infecteds = [];\n\t\tconst deads = [];\n\t\tObject.keys(data).map((date) => {\n\t\t\tif (typeof data[date] === 'object') {\n\t\t\t\tinfecteds.push([date, data[date].infecteds]);\n\t\t\t\tdeads.push([date, data[date].deads]);\n\t\t\t} else {\n\t\t\t\tdeads.push([date, data[date]]);\n\t\t\t}\n\t\t});\n\n\t\tconst opt = {\n\t\t\tchart: {\n\t\t\t\ttype: type,\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\ttext: '',\n\t\t\t},\n\n\t\t\txAxis: {\n\t\t\t\ttype: 'category',\n\t\t\t},\n\n\t\t\tseries: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Mortes',\n\t\t\t\t\tdata: deads,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\tif (infecteds.length > 0) {\n\t\t\topt.series.push({\n\t\t\t\tname: 'Casos',\n\t\t\t\tdata: infecteds,\n\t\t\t});\n\t\t}\n\n\t\tif (stacked) {\n\t\t\topt.plotOptions = {\n\t\t\t\tcolumn: {\n\t\t\t\t\tstacking: 'stream',\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\tHighcharts.theme = chartThemes[theme];\n\t\tHighcharts.setOptions(Highcharts.theme);\n\t\tHighcharts.chart(id, opt);\n\t}, [data, theme]);\n\treturn <div id={id}></div>;\n}\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}