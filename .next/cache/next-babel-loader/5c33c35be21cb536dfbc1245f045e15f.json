{"ast":null,"code":"var _jsxFileName = \"/home/eduardo/projetos/covid/src/services/apollo.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport fetch from 'isomorphic-unfetch';\nexport function withApollo(PageComponent) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 4\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 5\n      }\n    })));\n  };\n\n  WithApollo.getInicialProps = async ctx => {\n    const {\n      AppTree\n    } = ctx;\n    const apolloClient = ctx.apolloClient = initApolloClient;\n    let pageProps = {};\n    const apolloState = apolloClient.cache.extract();\n    return _objectSpread(_objectSpread({}, pageProps), {}, {\n      apolloState\n    });\n  };\n\n  return WithApollo;\n}\n\nfunction initApolloClient(initialState = {}) {\n  const cache = new InMemoryCache().restore(initialState);\n  const client = new ApolloClient({\n    uri: 'http://localhost:3000/api/graphql',\n    cache,\n    fetch\n  });\n  return client;\n}","map":{"version":3,"sources":["/home/eduardo/projetos/covid/src/services/apollo.js"],"names":["ApolloClient","ApolloProvider","InMemoryCache","fetch","withApollo","PageComponent","WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","getInicialProps","ctx","AppTree","cache","extract","initialState","restore","uri"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,SAASC,UAAT,CAAoBC,aAApB,EAAmC;AACzC,QAAMC,UAAU,GAAG,UAAiD;AAAA,QAAhD;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAgD;AAAA,QAAhBC,SAAgB;;AACnE,UAAMC,MAAM,GAAGH,YAAY,IAAII,gBAAgB,CAACH,WAAD,CAA/C;AAEA,WACC,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEE,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,MAAC,aAAD,eAAmBD,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADD,CADD;AAKA,GARD;;AAUAH,EAAAA,UAAU,CAACM,eAAX,GAA6B,MAAOC,GAAP,IAAe;AAC3C,UAAM;AAAEC,MAAAA;AAAF,QAAcD,GAApB;AACA,UAAMN,YAAY,GAAIM,GAAG,CAACN,YAAJ,GAAmBI,gBAAzC;AAEA,QAAIF,SAAS,GAAG,EAAhB;AAEA,UAAMD,WAAW,GAAGD,YAAY,CAACQ,KAAb,CAAmBC,OAAnB,EAApB;AAEA,2CACIP,SADJ;AAECD,MAAAA;AAFD;AAIA,GAZD;;AAcA,SAAOF,UAAP;AACA;;AAED,SAASK,gBAAT,CAA0BM,YAAY,GAAG,EAAzC,EAA6C;AAC5C,QAAMF,KAAK,GAAG,IAAIb,aAAJ,GAAoBgB,OAApB,CAA4BD,YAA5B,CAAd;AACA,QAAMP,MAAM,GAAG,IAAIV,YAAJ,CAAiB;AAC/BmB,IAAAA,GAAG,EAAE,mCAD0B;AAE/BJ,IAAAA,KAF+B;AAG/BZ,IAAAA;AAH+B,GAAjB,CAAf;AAMA,SAAOO,MAAP;AACA","sourcesContent":["import ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport fetch from 'isomorphic-unfetch';\n\nexport function withApollo(PageComponent) {\n\tconst WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n\t\tconst client = apolloClient || initApolloClient(apolloState);\n\n\t\treturn (\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<PageComponent {...pageProps} />\n\t\t\t</ApolloProvider>\n\t\t);\n\t};\n\n\tWithApollo.getInicialProps = async (ctx) => {\n\t\tconst { AppTree } = ctx;\n\t\tconst apolloClient = (ctx.apolloClient = initApolloClient);\n\n\t\tlet pageProps = {};\n\n\t\tconst apolloState = apolloClient.cache.extract();\n\n\t\treturn {\n\t\t\t...pageProps,\n\t\t\tapolloState,\n\t\t};\n\t};\n\n\treturn WithApollo;\n}\n\nfunction initApolloClient(initialState = {}) {\n\tconst cache = new InMemoryCache().restore(initialState);\n\tconst client = new ApolloClient({\n\t\turi: 'http://localhost:3000/api/graphql',\n\t\tcache,\n\t\tfetch,\n\t});\n\n\treturn client;\n}\n"]},"metadata":{},"sourceType":"module"}