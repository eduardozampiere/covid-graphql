{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Case from '../server/models/Case';\nexport const caseResolvers = {\n  Query: {\n    getCases: async (_, {\n      caseInput\n    }) => {\n      console.log('getCases', caseInput);\n      const filter = {};\n      if (caseInput.state) filter.state = caseInput.state;\n      if (caseInput.region) filter.region = caseInput.region;\n      const cases = await Case.find(filter).sort({\n        date: 'asc'\n      });\n      return cases.map(c => {\n        return _objectSpread({}, c._doc);\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/home/eduardo/projetos/covid/src/graphql/resolvers.js"],"names":["Case","caseResolvers","Query","getCases","_","caseInput","console","log","filter","state","region","cases","find","sort","date","map","c","_doc"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,uBAAjB;AAEA,OAAO,MAAMC,aAAa,GAAG;AAC5BC,EAAAA,KAAK,EAAE;AACNC,IAAAA,QAAQ,EAAE,OAAOC,CAAP,EAAU;AAAEC,MAAAA;AAAF,KAAV,KAA4B;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,SAAxB;AACA,YAAMG,MAAM,GAAG,EAAf;AACA,UAAIH,SAAS,CAACI,KAAd,EAAqBD,MAAM,CAACC,KAAP,GAAeJ,SAAS,CAACI,KAAzB;AACrB,UAAIJ,SAAS,CAACK,MAAd,EAAsBF,MAAM,CAACE,MAAP,GAAgBL,SAAS,CAACK,MAA1B;AACtB,YAAMC,KAAK,GAAG,MAAMX,IAAI,CAACY,IAAL,CAAUJ,MAAV,EAAkBK,IAAlB,CAAuB;AAC1CC,QAAAA,IAAI,EAAE;AADoC,OAAvB,CAApB;AAIA,aAAOH,KAAK,CAACI,GAAN,CAAWC,CAAD,IAAO;AACvB,iCACIA,CAAC,CAACC,IADN;AAGA,OAJM,CAAP;AAKA;AAfK;AADqB,CAAtB","sourcesContent":["import Case from '../server/models/Case';\n\nexport const caseResolvers = {\n\tQuery: {\n\t\tgetCases: async (_, { caseInput }) => {\n\t\t\tconsole.log('getCases', caseInput);\n\t\t\tconst filter = {};\n\t\t\tif (caseInput.state) filter.state = caseInput.state;\n\t\t\tif (caseInput.region) filter.region = caseInput.region;\n\t\t\tconst cases = await Case.find(filter).sort({\n\t\t\t\tdate: 'asc',\n\t\t\t});\n\n\t\t\treturn cases.map((c) => {\n\t\t\t\treturn {\n\t\t\t\t\t...c._doc,\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\t},\n};\n"]},"metadata":{},"sourceType":"module"}