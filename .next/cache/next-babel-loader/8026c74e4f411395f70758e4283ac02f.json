{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/eduardo/projetos/covid/src/context/Data.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n\\t\\t\\t\\t\\tquery($caseInput: CaseInput) {\\n\\t\\t\\t\\t\\t\\tgetCases(caseInput: $caseInput) {\\n\\t\\t\\t\\t\\t\\t\\tdeads\\n\\t\\t\\t\\t\\t\\t\\tinfecteds\\n\\t\\t\\t\\t\\t\\t\\tstate\\n\\t\\t\\t\\t\\t\\t\\tdate\\n\\t\\t\\t\\t\\t\\t\\tregion\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\t\\t\\t\\tmutation {\\n\\t\\t\\t\\t\\tupdateCases\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport momentjs from 'moment';\nimport { populations } from '../config/populations.json';\nimport gql from 'graphql-tag';\nvar DataContext = createContext();\nexport default function DataProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(null),\n      data = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState({}),\n      filter = _useState2[0],\n      setFilter = _useState2[1];\n\n  var _useState3 = useState('dark'),\n      theme = _useState3[0],\n      setTheme = _useState3[1];\n\n  var client = useApolloClient();\n\n  var updateData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var responseUpdate;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return client.mutate({\n                mutation: gql(_templateObject())\n              });\n\n            case 2:\n              responseUpdate = _context.sent;\n              console.log(responseUpdate);\n              _context.next = 6;\n              return loadData(filter);\n\n            case 6:\n              if (responseUpdate.data.updateCases) {\n                alert('Ok');\n              } else {\n                alert('Houve um erro!');\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function updateData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var loadData = useCallback( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(filter) {\n      var response, responseData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return client.query({\n                query: gql(_templateObject2()),\n                variables: {\n                  caseInput: {\n                    state: filter.state || null,\n                    region: filter.region || null\n                  }\n                }\n              });\n\n            case 3:\n              response = _context2.sent;\n              responseData = response.data.getCases;\n              organizeData(responseData);\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 8]]);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), []);\n  var organizeData = useCallback(function (responseData) {\n    var totalCase = {\n      perHundredThousand: {},\n      perState: {},\n      perDay: {},\n      perNewDay: {},\n      perRegion: {},\n      perWeek: {},\n      perLethality: {},\n      statePerRegion: {},\n      projection: {},\n      deads: 0,\n      infecteds: 0,\n      firstCase: null,\n      firstDeath: null,\n      lastDay: null,\n      lastInfecteds: 0,\n      lastDeads: 0,\n      toDouble: 0,\n      projectionDays: 30,\n      lethality: null\n    };\n\n    var _iterator = _createForOfIteratorHelper(responseData),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _dayCase2 = _step.value;\n        var _state = _dayCase2.state;\n        var date = _dayCase2.date;\n        var region = _dayCase2.region;\n        var newCases = _dayCase2.infecteds;\n        var newDeaths = _dayCase2.deads;\n        var moment = momentjs(date, 'YYYY-MM-DD');\n        var weekNumber = moment.week();\n        totalCase.deads += newDeaths;\n        totalCase.infecteds += newCases;\n        if (totalCase.infecteds <= 0 && totalCase.deads <= 0) continue;\n        totalCase.lastDay = date;\n\n        if (!totalCase.firstDeath && totalCase.deads) {\n          totalCase.firstDeath = date;\n        }\n\n        if (!totalCase.firstCase) {\n          totalCase.firstCase = date;\n        } //States per region\n\n\n        if (!totalCase.statePerRegion[region]) {\n          totalCase.statePerRegion[region] = {};\n        }\n\n        if (!totalCase.statePerRegion[region][_state]) {\n          totalCase.statePerRegion[region][_state] = true;\n        } //Cases per day\n\n\n        if (!totalCase.perDay[date]) {\n          totalCase.perDay[date] = {};\n        }\n\n        totalCase.perDay[date].deads = totalCase.deads;\n        totalCase.perDay[date].infecteds = totalCase.infecteds; //New cases per day\n\n        if (!totalCase.perNewDay[date]) {\n          totalCase.perNewDay[date] = {\n            deads: 0,\n            infecteds: 0\n          };\n        }\n\n        totalCase.perNewDay[date].deads += newDeaths;\n        totalCase.perNewDay[date].infecteds += newCases; //Cases per state\n\n        if (!totalCase.perState[_state]) {\n          totalCase.perState[_state] = {\n            deads: 0,\n            infecteds: 0\n          };\n        }\n\n        totalCase.perState[_state].deads += newDeaths;\n        totalCase.perState[_state].infecteds += newCases; //Cases per region\n\n        if (!totalCase.perRegion[region]) {\n          totalCase.perRegion[region] = {\n            infecteds: 0,\n            deads: 0\n          };\n        }\n\n        totalCase.perRegion[region].infecteds += newCases;\n        totalCase.perRegion[region].deads += newDeaths; //New cases per week\n\n        if (!totalCase.perWeek[weekNumber]) {\n          totalCase.perWeek[weekNumber] = {\n            infecteds: 0,\n            deads: 0\n          };\n        }\n\n        totalCase.perWeek[weekNumber].infecteds += newCases;\n        totalCase.perWeek[weekNumber].deads += newDeaths;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var arr = []; //Lethality per day\n\n    for (var day in totalCase.perDay) {\n      var dayCase = totalCase.perDay[day];\n      var infecteds = dayCase.infecteds;\n      var deads = dayCase.deads;\n      arr.push(infecteds);\n\n      if (deads > 0) {\n        totalCase.perLethality[day] = deads / infecteds * 100;\n      }\n    } //Double infecteds\n\n\n    var aux = 0;\n\n    for (var i = arr.length - 1; i >= 0; i--) {\n      var _infecteds = arr[i];\n      if (aux == 0) aux = _infecteds;\n\n      if (_infecteds <= aux / 2) {\n        break;\n      }\n\n      totalCase.toDouble++;\n    } //Per hundred thousand\n\n\n    for (var state in totalCase.perState) {\n      var _dayCase = totalCase.perState[state];\n      totalCase.perHundredThousand[state] = {\n        infecteds: _dayCase.infecteds / populations[state] * 100000,\n        deads: _dayCase.deads / populations[state] * 100000\n      };\n    } //Projection\n\n\n    totalCase.lethality = totalCase.deads / totalCase.infecteds;\n    var toDouble_mirror = 1;\n\n    for (var _i = 1; _i <= totalCase.projectionDays; _i++) {\n      var newInfections = parseInt(aux * Math.pow(2, toDouble_mirror / totalCase.toDouble));\n      toDouble_mirror++;\n      var futureDay = momentjs(totalCase.lastDay, 'YYYY-MM-DD').add(_i, 'd').format('YYYY-MM-DD');\n      totalCase.projection[futureDay] = {\n        infecteds: newInfections,\n        deads: parseInt(newInfections * totalCase.lethality)\n      };\n    }\n\n    totalCase.lastInfecteds = totalCase.perNewDay[totalCase.lastDay].infecteds;\n    totalCase.lastDeads = totalCase.perNewDay[totalCase.lastDay].deads;\n    setData(totalCase);\n  }, []);\n\n  var formatNumber = function formatNumber(value) {\n    return new Intl.NumberFormat('pt-BR', {}).format(value);\n  };\n\n  var formatPercent = function formatPercent(value) {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'percent',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(value);\n  };\n\n  var formatDate = function formatDate(date) {\n    return date.split('-').reverse().join('/');\n  };\n\n  useEffect(function () {\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return loadData(filter);\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  }, [loadData, filter]);\n  return __jsx(DataContext.Provider, {\n    value: {\n      data: data,\n      setData: setData,\n      filter: filter,\n      setFilter: setFilter,\n      formatNumber: formatNumber,\n      formatPercent: formatPercent,\n      formatDate: formatDate,\n      updateData: updateData,\n      setTheme: setTheme,\n      theme: theme\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 3\n    }\n  }, children);\n}\n\n_s(DataProvider, \"nMF8X0vzWMioLoGnNJDfDPApwmY=\", false, function () {\n  return [useApolloClient];\n});\n\n_c = DataProvider;\nexport function useData() {\n  _s2();\n\n  return useContext(DataContext);\n}\n\n_s2(useData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"sources":["/home/eduardo/projetos/covid/src/context/Data.js"],"names":["React","createContext","useState","useContext","useEffect","useCallback","useApolloClient","momentjs","populations","gql","DataContext","DataProvider","children","data","setData","filter","setFilter","theme","setTheme","client","updateData","mutate","mutation","responseUpdate","console","log","loadData","updateCases","alert","query","variables","caseInput","state","region","response","responseData","getCases","organizeData","totalCase","perHundredThousand","perState","perDay","perNewDay","perRegion","perWeek","perLethality","statePerRegion","projection","deads","infecteds","firstCase","firstDeath","lastDay","lastInfecteds","lastDeads","toDouble","projectionDays","lethality","dayCase","date","newCases","newDeaths","moment","weekNumber","week","arr","day","push","aux","i","length","toDouble_mirror","newInfections","parseInt","Math","pow","futureDay","add","format","formatNumber","value","Intl","NumberFormat","formatPercent","style","minimumFractionDigits","maximumFractionDigits","formatDate","split","reverse","join","useData"],"mappings":"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","sourcesContent":["import React, {\n\tcreateContext,\n\tuseState,\n\tuseContext,\n\tuseEffect,\n\tuseCallback,\n} from 'react';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport momentjs from 'moment';\nimport { populations } from '../config/populations.json';\nimport gql from 'graphql-tag';\nconst DataContext = createContext();\n\nexport default function DataProvider({ children }) {\n\tconst [data, setData] = useState(null);\n\tconst [filter, setFilter] = useState({});\n\tconst [theme, setTheme] = useState('dark');\n\tconst client = useApolloClient();\n\tconst updateData = async () => {\n\t\tconst responseUpdate = await client.mutate({\n\t\t\tmutation: gql`\n\t\t\t\tmutation {\n\t\t\t\t\tupdateCases\n\t\t\t\t}\n\t\t\t`,\n\t\t});\n\t\tconsole.log(responseUpdate);\n\t\tawait loadData(filter);\n\t\tif (responseUpdate.data.updateCases) {\n\t\t\talert('Ok');\n\t\t} else {\n\t\t\talert('Houve um erro!');\n\t\t}\n\t};\n\n\tconst loadData = useCallback(async (filter) => {\n\t\ttry {\n\t\t\tconst response = await client.query({\n\t\t\t\tquery: gql`\n\t\t\t\t\tquery($caseInput: CaseInput) {\n\t\t\t\t\t\tgetCases(caseInput: $caseInput) {\n\t\t\t\t\t\t\tdeads\n\t\t\t\t\t\t\tinfecteds\n\t\t\t\t\t\t\tstate\n\t\t\t\t\t\t\tdate\n\t\t\t\t\t\t\tregion\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: {\n\t\t\t\t\tcaseInput: {\n\t\t\t\t\t\tstate: filter.state || null,\n\t\t\t\t\t\tregion: filter.region || null,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst responseData = response.data.getCases;\n\t\t\torganizeData(responseData);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t}, []);\n\n\tconst organizeData = useCallback((responseData) => {\n\t\tconst totalCase = {\n\t\t\tperHundredThousand: {},\n\t\t\tperState: {},\n\t\t\tperDay: {},\n\t\t\tperNewDay: {},\n\t\t\tperRegion: {},\n\t\t\tperWeek: {},\n\t\t\tperLethality: {},\n\t\t\tstatePerRegion: {},\n\t\t\tprojection: {},\n\t\t\tdeads: 0,\n\t\t\tinfecteds: 0,\n\t\t\tfirstCase: null,\n\t\t\tfirstDeath: null,\n\t\t\tlastDay: null,\n\t\t\tlastInfecteds: 0,\n\t\t\tlastDeads: 0,\n\t\t\ttoDouble: 0,\n\t\t\tprojectionDays: 30,\n\t\t\tlethality: null,\n\t\t};\n\n\t\tfor (let dayCase of responseData) {\n\t\t\tconst state = dayCase.state;\n\t\t\tconst date = dayCase.date;\n\t\t\tconst region = dayCase.region;\n\t\t\tconst newCases = dayCase.infecteds;\n\t\t\tconst newDeaths = dayCase.deads;\n\t\t\tconst moment = momentjs(date, 'YYYY-MM-DD');\n\t\t\tconst weekNumber = moment.week();\n\t\t\ttotalCase.deads += newDeaths;\n\t\t\ttotalCase.infecteds += newCases;\n\n\t\t\tif (totalCase.infecteds <= 0 && totalCase.deads <= 0) continue;\n\n\t\t\ttotalCase.lastDay = date;\n\n\t\t\tif (!totalCase.firstDeath && totalCase.deads) {\n\t\t\t\ttotalCase.firstDeath = date;\n\t\t\t}\n\n\t\t\tif (!totalCase.firstCase) {\n\t\t\t\ttotalCase.firstCase = date;\n\t\t\t}\n\n\t\t\t//States per region\n\t\t\tif (!totalCase.statePerRegion[region]) {\n\t\t\t\ttotalCase.statePerRegion[region] = {};\n\t\t\t}\n\t\t\tif (!totalCase.statePerRegion[region][state]) {\n\t\t\t\ttotalCase.statePerRegion[region][state] = true;\n\t\t\t}\n\n\t\t\t//Cases per day\n\t\t\tif (!totalCase.perDay[date]) {\n\t\t\t\ttotalCase.perDay[date] = {};\n\t\t\t}\n\n\t\t\ttotalCase.perDay[date].deads = totalCase.deads;\n\t\t\ttotalCase.perDay[date].infecteds = totalCase.infecteds;\n\n\t\t\t//New cases per day\n\t\t\tif (!totalCase.perNewDay[date]) {\n\t\t\t\ttotalCase.perNewDay[date] = {\n\t\t\t\t\tdeads: 0,\n\t\t\t\t\tinfecteds: 0,\n\t\t\t\t};\n\t\t\t}\n\t\t\ttotalCase.perNewDay[date].deads += newDeaths;\n\t\t\ttotalCase.perNewDay[date].infecteds += newCases;\n\n\t\t\t//Cases per state\n\t\t\tif (!totalCase.perState[state]) {\n\t\t\t\ttotalCase.perState[state] = {\n\t\t\t\t\tdeads: 0,\n\t\t\t\t\tinfecteds: 0,\n\t\t\t\t};\n\t\t\t}\n\t\t\ttotalCase.perState[state].deads += newDeaths;\n\t\t\ttotalCase.perState[state].infecteds += newCases;\n\n\t\t\t//Cases per region\n\t\t\tif (!totalCase.perRegion[region]) {\n\t\t\t\ttotalCase.perRegion[region] = {\n\t\t\t\t\tinfecteds: 0,\n\t\t\t\t\tdeads: 0,\n\t\t\t\t};\n\t\t\t}\n\t\t\ttotalCase.perRegion[region].infecteds += newCases;\n\t\t\ttotalCase.perRegion[region].deads += newDeaths;\n\n\t\t\t//New cases per week\n\t\t\tif (!totalCase.perWeek[weekNumber]) {\n\t\t\t\ttotalCase.perWeek[weekNumber] = {\n\t\t\t\t\tinfecteds: 0,\n\t\t\t\t\tdeads: 0,\n\t\t\t\t};\n\t\t\t}\n\t\t\ttotalCase.perWeek[weekNumber].infecteds += newCases;\n\t\t\ttotalCase.perWeek[weekNumber].deads += newDeaths;\n\t\t}\n\n\t\tconst arr = [];\n\t\t//Lethality per day\n\t\tfor (let day in totalCase.perDay) {\n\t\t\tconst dayCase = totalCase.perDay[day];\n\t\t\tconst infecteds = dayCase.infecteds;\n\t\t\tconst deads = dayCase.deads;\n\t\t\tarr.push(infecteds);\n\n\t\t\tif (deads > 0) {\n\t\t\t\ttotalCase.perLethality[day] = (deads / infecteds) * 100;\n\t\t\t}\n\t\t}\n\n\t\t//Double infecteds\n\t\tlet aux = 0;\n\t\tfor (let i = arr.length - 1; i >= 0; i--) {\n\t\t\tconst infecteds = arr[i];\n\t\t\tif (aux == 0) aux = infecteds;\n\n\t\t\tif (infecteds <= aux / 2) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttotalCase.toDouble++;\n\t\t}\n\n\t\t//Per hundred thousand\n\t\tfor (let state in totalCase.perState) {\n\t\t\tconst dayCase = totalCase.perState[state];\n\t\t\ttotalCase.perHundredThousand[state] = {\n\t\t\t\tinfecteds: (dayCase.infecteds / populations[state]) * 100000,\n\t\t\t\tdeads: (dayCase.deads / populations[state]) * 100000,\n\t\t\t};\n\t\t}\n\n\t\t//Projection\n\t\ttotalCase.lethality = totalCase.deads / totalCase.infecteds;\n\t\tlet toDouble_mirror = 1;\n\t\tfor (let i = 1; i <= totalCase.projectionDays; i++) {\n\t\t\tlet newInfections = parseInt(\n\t\t\t\taux * Math.pow(2, toDouble_mirror / totalCase.toDouble)\n\t\t\t);\n\t\t\ttoDouble_mirror++;\n\t\t\tconst futureDay = momentjs(totalCase.lastDay, 'YYYY-MM-DD')\n\t\t\t\t.add(i, 'd')\n\t\t\t\t.format('YYYY-MM-DD');\n\n\t\t\ttotalCase.projection[futureDay] = {\n\t\t\t\tinfecteds: newInfections,\n\t\t\t\tdeads: parseInt(newInfections * totalCase.lethality),\n\t\t\t};\n\t\t}\n\n\t\ttotalCase.lastInfecteds = totalCase.perNewDay[totalCase.lastDay].infecteds;\n\t\ttotalCase.lastDeads = totalCase.perNewDay[totalCase.lastDay].deads;\n\t\tsetData(totalCase);\n\t}, []);\n\n\tconst formatNumber = (value) => {\n\t\treturn new Intl.NumberFormat('pt-BR', {}).format(value);\n\t};\n\n\tconst formatPercent = (value) => {\n\t\treturn new Intl.NumberFormat('pt-BR', {\n\t\t\tstyle: 'percent',\n\t\t\tminimumFractionDigits: 2,\n\t\t\tmaximumFractionDigits: 2,\n\t\t}).format(value);\n\t};\n\n\tconst formatDate = (date) => {\n\t\treturn date.split('-').reverse().join('/');\n\t};\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tawait loadData(filter);\n\t\t})();\n\t}, [loadData, filter]);\n\n\treturn (\n\t\t<DataContext.Provider\n\t\t\tvalue={{\n\t\t\t\tdata,\n\t\t\t\tsetData,\n\t\t\t\tfilter,\n\t\t\t\tsetFilter,\n\t\t\t\tformatNumber,\n\t\t\t\tformatPercent,\n\t\t\t\tformatDate,\n\t\t\t\tupdateData,\n\t\t\t\tsetTheme,\n\t\t\t\ttheme,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</DataContext.Provider>\n\t);\n}\n\nexport function useData() {\n\treturn useContext(DataContext);\n}\n"]},"metadata":{},"sourceType":"module"}