{"ast":null,"code":"var _jsxFileName = \"/home/eduardo/projetos/covid/src/context/Data.js\";\nvar __jsx = React.createElement;\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport momentjs from 'moment';\nimport { populations } from '../config/populations.json';\nimport gql from 'graphql-tag';\nconst DataContext = createContext();\nexport default function DataProvider({\n  children\n}) {\n  const {\n    0: data,\n    1: setData\n  } = useState(null);\n  const {\n    0: filter,\n    1: setFilter\n  } = useState({});\n  const {\n    0: theme,\n    1: setTheme\n  } = useState('dark');\n  const client = useApolloClient();\n\n  const updateData = async () => {\n    const responseUpdate = await client.mutate({\n      mutation: gql`\n\t\t\t\tmutation {\n\t\t\t\t\tupdateCases\n\t\t\t\t}\n\t\t\t`\n    });\n    console.log(responseUpdate);\n    await loadData(filter);\n\n    if (responseUpdate.data.updateCases) {\n      alert('Ok');\n    } else {\n      alert('Houve um erro!');\n    }\n  };\n\n  const loadData = useCallback(async filter => {\n    try {\n      const response = await client.query({\n        query: gql`\n\t\t\t\t\tquery($caseInput: CaseInput) {\n\t\t\t\t\t\tgetCases(caseInput: $caseInput) {\n\t\t\t\t\t\t\tdeads\n\t\t\t\t\t\t\tinfecteds\n\t\t\t\t\t\t\tstate\n\t\t\t\t\t\t\tdate\n\t\t\t\t\t\t\tregion\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n        variables: {\n          caseInput: {\n            state: filter.state || null,\n            region: filter.region || null\n          }\n        }\n      });\n      const responseData = response.data.getCases;\n      organizeData(responseData);\n    } catch (err) {\n      console.log(err);\n    }\n  }, []);\n  const organizeData = useCallback(responseData => {\n    const totalCase = {\n      perHundredThousand: {},\n      perState: {},\n      perDay: {},\n      perNewDay: {},\n      perRegion: {},\n      perWeek: {},\n      perLethality: {},\n      statePerRegion: {},\n      projection: {},\n      deads: 0,\n      infecteds: 0,\n      firstCase: null,\n      firstDeath: null,\n      lastDay: null,\n      lastInfecteds: 0,\n      lastDeads: 0,\n      toDouble: 0,\n      projectionDays: 30,\n      lethality: null\n    };\n\n    for (let dayCase of responseData) {\n      const state = dayCase.state;\n      const date = dayCase.date;\n      const region = dayCase.region;\n      const newCases = dayCase.infecteds;\n      const newDeaths = dayCase.deads;\n      const moment = momentjs(date, 'YYYY-MM-DD');\n      const weekNumber = moment.week();\n      totalCase.deads += newDeaths;\n      totalCase.infecteds += newCases;\n      if (totalCase.infecteds <= 0 && totalCase.deads <= 0) continue;\n      totalCase.lastDay = date;\n\n      if (!totalCase.firstDeath && totalCase.deads) {\n        totalCase.firstDeath = date;\n      }\n\n      if (!totalCase.firstCase) {\n        totalCase.firstCase = date;\n      } //States per region\n\n\n      if (!totalCase.statePerRegion[region]) {\n        totalCase.statePerRegion[region] = {};\n      }\n\n      if (!totalCase.statePerRegion[region][state]) {\n        totalCase.statePerRegion[region][state] = true;\n      } //Cases per day\n\n\n      if (!totalCase.perDay[date]) {\n        totalCase.perDay[date] = {};\n      }\n\n      totalCase.perDay[date].deads = totalCase.deads;\n      totalCase.perDay[date].infecteds = totalCase.infecteds; //New cases per day\n\n      if (!totalCase.perNewDay[date]) {\n        totalCase.perNewDay[date] = {\n          deads: 0,\n          infecteds: 0\n        };\n      }\n\n      totalCase.perNewDay[date].deads += newDeaths;\n      totalCase.perNewDay[date].infecteds += newCases; //Cases per state\n\n      if (!totalCase.perState[state]) {\n        totalCase.perState[state] = {\n          deads: 0,\n          infecteds: 0\n        };\n      }\n\n      totalCase.perState[state].deads += newDeaths;\n      totalCase.perState[state].infecteds += newCases; //Cases per region\n\n      if (!totalCase.perRegion[region]) {\n        totalCase.perRegion[region] = {\n          infecteds: 0,\n          deads: 0\n        };\n      }\n\n      totalCase.perRegion[region].infecteds += newCases;\n      totalCase.perRegion[region].deads += newDeaths; //New cases per week\n\n      if (!totalCase.perWeek[weekNumber]) {\n        totalCase.perWeek[weekNumber] = {\n          infecteds: 0,\n          deads: 0\n        };\n      }\n\n      totalCase.perWeek[weekNumber].infecteds += newCases;\n      totalCase.perWeek[weekNumber].deads += newDeaths;\n    }\n\n    const arr = []; //Lethality per day\n\n    for (let day in totalCase.perDay) {\n      const dayCase = totalCase.perDay[day];\n      const infecteds = dayCase.infecteds;\n      const deads = dayCase.deads;\n      arr.push(infecteds);\n\n      if (deads > 0) {\n        totalCase.perLethality[day] = deads / infecteds * 100;\n      }\n    } //Double infecteds\n\n\n    let aux = 0;\n\n    for (let i = arr.length - 1; i >= 0; i--) {\n      const infecteds = arr[i];\n      if (aux == 0) aux = infecteds;\n\n      if (infecteds <= aux / 2) {\n        break;\n      }\n\n      totalCase.toDouble++;\n    } //Per hundred thousand\n\n\n    for (let state in totalCase.perState) {\n      const dayCase = totalCase.perState[state];\n      totalCase.perHundredThousand[state] = {\n        infecteds: dayCase.infecteds / populations[state] * 100000,\n        deads: dayCase.deads / populations[state] * 100000\n      };\n    } //Projection\n\n\n    totalCase.lethality = totalCase.deads / totalCase.infecteds;\n    let toDouble_mirror = 1;\n\n    for (let i = 1; i <= totalCase.projectionDays; i++) {\n      let newInfections = parseInt(aux * Math.pow(2, toDouble_mirror / totalCase.toDouble));\n      toDouble_mirror++;\n      const futureDay = momentjs(totalCase.lastDay, 'YYYY-MM-DD').add(i, 'd').format('YYYY-MM-DD');\n      totalCase.projection[futureDay] = {\n        infecteds: newInfections,\n        deads: parseInt(newInfections * totalCase.lethality)\n      };\n    }\n\n    totalCase.lastInfecteds = totalCase.perNewDay[totalCase.lastDay].infecteds;\n    totalCase.lastDeads = totalCase.perNewDay[totalCase.lastDay].deads;\n    setData(totalCase);\n  }, []);\n\n  const formatNumber = value => {\n    return new Intl.NumberFormat('pt-BR', {}).format(value);\n  };\n\n  const formatPercent = value => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'percent',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(value);\n  };\n\n  const formatDate = date => {\n    return date.split('-').reverse().join('/');\n  };\n\n  useEffect(() => {\n    (async () => {\n      await loadData(filter);\n    })();\n  }, [loadData, filter]);\n  return __jsx(DataContext.Provider, {\n    value: {\n      data,\n      setData,\n      filter,\n      setFilter,\n      formatNumber,\n      formatPercent,\n      formatDate,\n      updateData,\n      setTheme,\n      theme\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 3\n    }\n  }, children);\n}\nexport function useData() {\n  return useContext(DataContext);\n}","map":{"version":3,"sources":["/home/eduardo/projetos/covid/src/context/Data.js"],"names":["React","createContext","useState","useContext","useEffect","useCallback","useApolloClient","momentjs","populations","gql","DataContext","DataProvider","children","data","setData","filter","setFilter","theme","setTheme","client","updateData","responseUpdate","mutate","mutation","console","log","loadData","updateCases","alert","response","query","variables","caseInput","state","region","responseData","getCases","organizeData","err","totalCase","perHundredThousand","perState","perDay","perNewDay","perRegion","perWeek","perLethality","statePerRegion","projection","deads","infecteds","firstCase","firstDeath","lastDay","lastInfecteds","lastDeads","toDouble","projectionDays","lethality","dayCase","date","newCases","newDeaths","moment","weekNumber","week","arr","day","push","aux","i","length","toDouble_mirror","newInfections","parseInt","Math","pow","futureDay","add","format","formatNumber","value","Intl","NumberFormat","formatPercent","style","minimumFractionDigits","maximumFractionDigits","formatDate","split","reverse","join","useData"],"mappings":"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","sourcesContent":["import React, {\n\tcreateContext,\n\tuseState,\n\tuseContext,\n\tuseEffect,\n\tuseCallback,\n} from 'react';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport momentjs from 'moment';\nimport { populations } from '../config/populations.json';\nimport gql from 'graphql-tag';\nconst DataContext = createContext();\n\nexport default function DataProvider({ children }) {\n\tconst [data, setData] = useState(null);\n\tconst [filter, setFilter] = useState({});\n\tconst [theme, setTheme] = useState('dark');\n\tconst client = useApolloClient();\n\tconst updateData = async () => {\n\t\tconst responseUpdate = await client.mutate({\n\t\t\tmutation: gql`\n\t\t\t\tmutation {\n\t\t\t\t\tupdateCases\n\t\t\t\t}\n\t\t\t`,\n\t\t});\n\t\tconsole.log(responseUpdate);\n\t\tawait loadData(filter);\n\t\tif (responseUpdate.data.updateCases) {\n\t\t\talert('Ok');\n\t\t} else {\n\t\t\talert('Houve um erro!');\n\t\t}\n\t};\n\n\tconst loadData = useCallback(async (filter) => {\n\t\ttry {\n\t\t\tconst response = await client.query({\n\t\t\t\tquery: gql`\n\t\t\t\t\tquery($caseInput: CaseInput) {\n\t\t\t\t\t\tgetCases(caseInput: $caseInput) {\n\t\t\t\t\t\t\tdeads\n\t\t\t\t\t\t\tinfecteds\n\t\t\t\t\t\t\tstate\n\t\t\t\t\t\t\tdate\n\t\t\t\t\t\t\tregion\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: {\n\t\t\t\t\tcaseInput: {\n\t\t\t\t\t\tstate: filter.state || null,\n\t\t\t\t\t\tregion: filter.region || null,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst responseData = response.data.getCases;\n\t\t\torganizeData(responseData);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t}, []);\n\n\tconst organizeData = useCallback((responseData) => {\n\t\tconst totalCase = {\n\t\t\tperHundredThousand: {},\n\t\t\tperState: {},\n\t\t\tperDay: {},\n\t\t\tperNewDay: {},\n\t\t\tperRegion: {},\n\t\t\tperWeek: {},\n\t\t\tperLethality: {},\n\t\t\tstatePerRegion: {},\n\t\t\tprojection: {},\n\t\t\tdeads: 0,\n\t\t\tinfecteds: 0,\n\t\t\tfirstCase: null,\n\t\t\tfirstDeath: null,\n\t\t\tlastDay: null,\n\t\t\tlastInfecteds: 0,\n\t\t\tlastDeads: 0,\n\t\t\ttoDouble: 0,\n\t\t\tprojectionDays: 30,\n\t\t\tlethality: null,\n\t\t};\n\n\t\tfor (let dayCase of responseData) {\n\t\t\tconst state = dayCase.state;\n\t\t\tconst date = dayCase.date;\n\t\t\tconst region = dayCase.region;\n\t\t\tconst newCases = dayCase.infecteds;\n\t\t\tconst newDeaths = dayCase.deads;\n\t\t\tconst moment = momentjs(date, 'YYYY-MM-DD');\n\t\t\tconst weekNumber = moment.week();\n\t\t\ttotalCase.deads += newDeaths;\n\t\t\ttotalCase.infecteds += newCases;\n\n\t\t\tif (totalCase.infecteds <= 0 && totalCase.deads <= 0) continue;\n\n\t\t\ttotalCase.lastDay = date;\n\n\t\t\tif (!totalCase.firstDeath && totalCase.deads) {\n\t\t\t\ttotalCase.firstDeath = date;\n\t\t\t}\n\n\t\t\tif (!totalCase.firstCase) {\n\t\t\t\ttotalCase.firstCase = date;\n\t\t\t}\n\n\t\t\t//States per region\n\t\t\tif (!totalCase.statePerRegion[region]) {\n\t\t\t\ttotalCase.statePerRegion[region] = {};\n\t\t\t}\n\t\t\tif (!totalCase.statePerRegion[region][state]) {\n\t\t\t\ttotalCase.statePerRegion[region][state] = true;\n\t\t\t}\n\n\t\t\t//Cases per day\n\t\t\tif (!totalCase.perDay[date]) {\n\t\t\t\ttotalCase.perDay[date] = {};\n\t\t\t}\n\n\t\t\ttotalCase.perDay[date].deads = totalCase.deads;\n\t\t\ttotalCase.perDay[date].infecteds = totalCase.infecteds;\n\n\t\t\t//New cases per day\n\t\t\tif (!totalCase.perNewDay[date]) {\n\t\t\t\ttotalCase.perNewDay[date] = {\n\t\t\t\t\tdeads: 0,\n\t\t\t\t\tinfecteds: 0,\n\t\t\t\t};\n\t\t\t}\n\t\t\ttotalCase.perNewDay[date].deads += newDeaths;\n\t\t\ttotalCase.perNewDay[date].infecteds += newCases;\n\n\t\t\t//Cases per state\n\t\t\tif (!totalCase.perState[state]) {\n\t\t\t\ttotalCase.perState[state] = {\n\t\t\t\t\tdeads: 0,\n\t\t\t\t\tinfecteds: 0,\n\t\t\t\t};\n\t\t\t}\n\t\t\ttotalCase.perState[state].deads += newDeaths;\n\t\t\ttotalCase.perState[state].infecteds += newCases;\n\n\t\t\t//Cases per region\n\t\t\tif (!totalCase.perRegion[region]) {\n\t\t\t\ttotalCase.perRegion[region] = {\n\t\t\t\t\tinfecteds: 0,\n\t\t\t\t\tdeads: 0,\n\t\t\t\t};\n\t\t\t}\n\t\t\ttotalCase.perRegion[region].infecteds += newCases;\n\t\t\ttotalCase.perRegion[region].deads += newDeaths;\n\n\t\t\t//New cases per week\n\t\t\tif (!totalCase.perWeek[weekNumber]) {\n\t\t\t\ttotalCase.perWeek[weekNumber] = {\n\t\t\t\t\tinfecteds: 0,\n\t\t\t\t\tdeads: 0,\n\t\t\t\t};\n\t\t\t}\n\t\t\ttotalCase.perWeek[weekNumber].infecteds += newCases;\n\t\t\ttotalCase.perWeek[weekNumber].deads += newDeaths;\n\t\t}\n\n\t\tconst arr = [];\n\t\t//Lethality per day\n\t\tfor (let day in totalCase.perDay) {\n\t\t\tconst dayCase = totalCase.perDay[day];\n\t\t\tconst infecteds = dayCase.infecteds;\n\t\t\tconst deads = dayCase.deads;\n\t\t\tarr.push(infecteds);\n\n\t\t\tif (deads > 0) {\n\t\t\t\ttotalCase.perLethality[day] = (deads / infecteds) * 100;\n\t\t\t}\n\t\t}\n\n\t\t//Double infecteds\n\t\tlet aux = 0;\n\t\tfor (let i = arr.length - 1; i >= 0; i--) {\n\t\t\tconst infecteds = arr[i];\n\t\t\tif (aux == 0) aux = infecteds;\n\n\t\t\tif (infecteds <= aux / 2) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttotalCase.toDouble++;\n\t\t}\n\n\t\t//Per hundred thousand\n\t\tfor (let state in totalCase.perState) {\n\t\t\tconst dayCase = totalCase.perState[state];\n\t\t\ttotalCase.perHundredThousand[state] = {\n\t\t\t\tinfecteds: (dayCase.infecteds / populations[state]) * 100000,\n\t\t\t\tdeads: (dayCase.deads / populations[state]) * 100000,\n\t\t\t};\n\t\t}\n\n\t\t//Projection\n\t\ttotalCase.lethality = totalCase.deads / totalCase.infecteds;\n\t\tlet toDouble_mirror = 1;\n\t\tfor (let i = 1; i <= totalCase.projectionDays; i++) {\n\t\t\tlet newInfections = parseInt(\n\t\t\t\taux * Math.pow(2, toDouble_mirror / totalCase.toDouble)\n\t\t\t);\n\t\t\ttoDouble_mirror++;\n\t\t\tconst futureDay = momentjs(totalCase.lastDay, 'YYYY-MM-DD')\n\t\t\t\t.add(i, 'd')\n\t\t\t\t.format('YYYY-MM-DD');\n\n\t\t\ttotalCase.projection[futureDay] = {\n\t\t\t\tinfecteds: newInfections,\n\t\t\t\tdeads: parseInt(newInfections * totalCase.lethality),\n\t\t\t};\n\t\t}\n\n\t\ttotalCase.lastInfecteds = totalCase.perNewDay[totalCase.lastDay].infecteds;\n\t\ttotalCase.lastDeads = totalCase.perNewDay[totalCase.lastDay].deads;\n\t\tsetData(totalCase);\n\t}, []);\n\n\tconst formatNumber = (value) => {\n\t\treturn new Intl.NumberFormat('pt-BR', {}).format(value);\n\t};\n\n\tconst formatPercent = (value) => {\n\t\treturn new Intl.NumberFormat('pt-BR', {\n\t\t\tstyle: 'percent',\n\t\t\tminimumFractionDigits: 2,\n\t\t\tmaximumFractionDigits: 2,\n\t\t}).format(value);\n\t};\n\n\tconst formatDate = (date) => {\n\t\treturn date.split('-').reverse().join('/');\n\t};\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tawait loadData(filter);\n\t\t})();\n\t}, [loadData, filter]);\n\n\treturn (\n\t\t<DataContext.Provider\n\t\t\tvalue={{\n\t\t\t\tdata,\n\t\t\t\tsetData,\n\t\t\t\tfilter,\n\t\t\t\tsetFilter,\n\t\t\t\tformatNumber,\n\t\t\t\tformatPercent,\n\t\t\t\tformatDate,\n\t\t\t\tupdateData,\n\t\t\t\tsetTheme,\n\t\t\t\ttheme,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</DataContext.Provider>\n\t);\n}\n\nexport function useData() {\n\treturn useContext(DataContext);\n}\n"]},"metadata":{},"sourceType":"module"}