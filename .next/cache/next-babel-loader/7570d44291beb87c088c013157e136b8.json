{"ast":null,"code":"import Case from '../server/models/Case';\nimport csv from 'get-csv';\nimport { CSV_URL } from '../config/config.json';\n\nfunction getRegion(state) {\n  if (['AM', 'RR', 'AP', 'PA', 'TO', 'RO', 'AC'].indexOf(state) !== -1) return 'Norte';\n  if (['MA', 'PI', 'CE', 'RN', 'PE', 'PB', 'SE', 'AL', 'BA'].indexOf(state) !== -1) return 'Nordeste';\n  if (['MT', 'MS', 'GO', 'DF'].indexOf(state) !== -1) return 'Centro-Oeste';\n  if (['PR', 'RS', 'SC'].indexOf(state) !== -1) return 'Sul';\n  return 'Sudeste';\n}\n\nexport const caseMutations = {\n  Mutation: {\n    updateCases: async () => {\n      const rows = await csv(CSV_URL);\n\n      for (let row of rows) {\n        if (row.state === 'TOTAL') continue;\n        const state = row.state;\n        const date = row.date;\n        const deads = parseInt(row.newDeaths);\n        const infecteds = parseInt(row.newCases);\n        const region = getRegion(state);\n\n        try {\n          const localCase = await Case.findOne({\n            state,\n            date\n          });\n\n          if (!localCase) {\n            await Case.create({\n              state,\n              date,\n              deads,\n              infecteds,\n              region\n            });\n          } else {\n            if (localCase.deads !== deads || localCase.infecteds !== infecteds) {\n              localCase.deads = deads;\n              localCase.infecteds = infecteds;\n              await localCase.save();\n            }\n          }\n        } catch (err) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n};","map":{"version":3,"sources":["/home/eduardo/projetos/covid/src/graphql/mutations.js"],"names":["Case","csv","CSV_URL","getRegion","state","indexOf","caseMutations","Mutation","updateCases","rows","row","date","deads","parseInt","newDeaths","infecteds","newCases","region","localCase","findOne","create","save","err"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,uBAAjB;AACA,OAAOC,GAAP,MAAgB,SAAhB;AACA,SAASC,OAAT,QAAwB,uBAAxB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACzB,MAAI,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2CC,OAA3C,CAAmDD,KAAnD,MAA8D,CAAC,CAAnE,EACC,OAAO,OAAP;AACD,MACC,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuDC,OAAvD,CAA+DD,KAA/D,MAA0E,CAAC,CAD5E,EAGC,OAAO,UAAP;AACD,MAAI,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyBC,OAAzB,CAAiCD,KAAjC,MAA4C,CAAC,CAAjD,EAAoD,OAAO,cAAP;AACpD,MAAI,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmBC,OAAnB,CAA2BD,KAA3B,MAAsC,CAAC,CAA3C,EAA8C,OAAO,KAAP;AAC9C,SAAO,SAAP;AACA;;AAED,OAAO,MAAME,aAAa,GAAG;AAC5BC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,WAAW,EAAE,YAAY;AACxB,YAAMC,IAAI,GAAG,MAAMR,GAAG,CAACC,OAAD,CAAtB;;AACA,WAAK,IAAIQ,GAAT,IAAgBD,IAAhB,EAAsB;AACrB,YAAIC,GAAG,CAACN,KAAJ,KAAc,OAAlB,EAA2B;AAC3B,cAAMA,KAAK,GAAGM,GAAG,CAACN,KAAlB;AACA,cAAMO,IAAI,GAAGD,GAAG,CAACC,IAAjB;AACA,cAAMC,KAAK,GAAGC,QAAQ,CAACH,GAAG,CAACI,SAAL,CAAtB;AACA,cAAMC,SAAS,GAAGF,QAAQ,CAACH,GAAG,CAACM,QAAL,CAA1B;AACA,cAAMC,MAAM,GAAGd,SAAS,CAACC,KAAD,CAAxB;;AAEA,YAAI;AACH,gBAAMc,SAAS,GAAG,MAAMlB,IAAI,CAACmB,OAAL,CAAa;AACpCf,YAAAA,KADoC;AAEpCO,YAAAA;AAFoC,WAAb,CAAxB;;AAKA,cAAI,CAACO,SAAL,EAAgB;AACf,kBAAMlB,IAAI,CAACoB,MAAL,CAAY;AACjBhB,cAAAA,KADiB;AAEjBO,cAAAA,IAFiB;AAGjBC,cAAAA,KAHiB;AAIjBG,cAAAA,SAJiB;AAKjBE,cAAAA;AALiB,aAAZ,CAAN;AAOA,WARD,MAQO;AACN,gBACCC,SAAS,CAACN,KAAV,KAAoBA,KAApB,IACAM,SAAS,CAACH,SAAV,KAAwBA,SAFzB,EAGE;AACDG,cAAAA,SAAS,CAACN,KAAV,GAAkBA,KAAlB;AACAM,cAAAA,SAAS,CAACH,SAAV,GAAsBA,SAAtB;AACA,oBAAMG,SAAS,CAACG,IAAV,EAAN;AACA;AACD;AACD,SAxBD,CAwBE,OAAOC,GAAP,EAAY;AACb,iBAAO,KAAP;AACA;AACD;;AACD,aAAO,IAAP;AACA;AAxCQ;AADkB,CAAtB","sourcesContent":["import Case from '../server/models/Case';\nimport csv from 'get-csv';\nimport { CSV_URL } from '../config/config.json';\n\nfunction getRegion(state) {\n\tif (['AM', 'RR', 'AP', 'PA', 'TO', 'RO', 'AC'].indexOf(state) !== -1)\n\t\treturn 'Norte';\n\tif (\n\t\t['MA', 'PI', 'CE', 'RN', 'PE', 'PB', 'SE', 'AL', 'BA'].indexOf(state) !== -1\n\t)\n\t\treturn 'Nordeste';\n\tif (['MT', 'MS', 'GO', 'DF'].indexOf(state) !== -1) return 'Centro-Oeste';\n\tif (['PR', 'RS', 'SC'].indexOf(state) !== -1) return 'Sul';\n\treturn 'Sudeste';\n}\n\nexport const caseMutations = {\n\tMutation: {\n\t\tupdateCases: async () => {\n\t\t\tconst rows = await csv(CSV_URL);\n\t\t\tfor (let row of rows) {\n\t\t\t\tif (row.state === 'TOTAL') continue;\n\t\t\t\tconst state = row.state;\n\t\t\t\tconst date = row.date;\n\t\t\t\tconst deads = parseInt(row.newDeaths);\n\t\t\t\tconst infecteds = parseInt(row.newCases);\n\t\t\t\tconst region = getRegion(state);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst localCase = await Case.findOne({\n\t\t\t\t\t\tstate,\n\t\t\t\t\t\tdate,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!localCase) {\n\t\t\t\t\t\tawait Case.create({\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tdate,\n\t\t\t\t\t\t\tdeads,\n\t\t\t\t\t\t\tinfecteds,\n\t\t\t\t\t\t\tregion,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tlocalCase.deads !== deads ||\n\t\t\t\t\t\t\tlocalCase.infecteds !== infecteds\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tlocalCase.deads = deads;\n\t\t\t\t\t\t\tlocalCase.infecteds = infecteds;\n\t\t\t\t\t\t\tawait localCase.save();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t},\n};\n"]},"metadata":{},"sourceType":"module"}