{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/eduardo/projetos/covid/src/services/apollo.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport fetch from 'isomorphic-unfetch';\nexport function withApollo(PageComponent) {\n  var _this = this;\n\n  var WithApollo = function WithApollo(_ref) {\n    var apolloClient = _ref.apolloClient,\n        apolloState = _ref.apolloState,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 4\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 5\n      }\n    })));\n  };\n\n  WithApollo.getInicialProps = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n      var AppTree, apolloClient, pageProps, apolloState;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = ctx.AppTree;\n              apolloClient = ctx.apolloClient = initApolloClient;\n              pageProps = {};\n              apolloState = apolloClient.cache.extract();\n              return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                apolloState: apolloState\n              }));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return WithApollo;\n}\n\nfunction initApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var cache = new InMemoryCache().restore(initialState);\n  var client = new ApolloClient({\n    uri: 'http://localhost:3000/api/graphql',\n    cache: cache,\n    fetch: fetch\n  });\n  return client;\n}","map":{"version":3,"sources":["/home/eduardo/projetos/covid/src/services/apollo.js"],"names":["ApolloClient","ApolloProvider","InMemoryCache","fetch","withApollo","PageComponent","WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","getInicialProps","ctx","AppTree","cache","extract","initialState","restore","uri"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,SAASC,UAAT,CAAoBC,aAApB,EAAmC;AAAA;;AACzC,MAAMC,UAAU,GAAG,SAAbA,UAAa,OAAiD;AAAA,QAA9CC,YAA8C,QAA9CA,YAA8C;AAAA,QAAhCC,WAAgC,QAAhCA,WAAgC;AAAA,QAAhBC,SAAgB;;AACnE,QAAMC,MAAM,GAAGH,YAAY,IAAII,gBAAgB,CAACH,WAAD,CAA/C;AAEA,WACC,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEE,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,MAAC,aAAD,eAAmBD,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADD,CADD;AAKA,GARD;;AAUAH,EAAAA,UAAU,CAACM,eAAX;AAAA,yEAA6B,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,cAAAA,OADoB,GACRD,GADQ,CACpBC,OADoB;AAEtBP,cAAAA,YAFsB,GAENM,GAAG,CAACN,YAAJ,GAAmBI,gBAFb;AAIxBF,cAAAA,SAJwB,GAIZ,EAJY;AAMtBD,cAAAA,WANsB,GAMRD,YAAY,CAACQ,KAAb,CAAmBC,OAAnB,EANQ;AAAA,+EASxBP,SATwB;AAU3BD,gBAAAA,WAAW,EAAXA;AAV2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA7B;;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAOF,UAAP;AACA;;AAED,SAASK,gBAAT,GAA6C;AAAA,MAAnBM,YAAmB,uEAAJ,EAAI;AAC5C,MAAMF,KAAK,GAAG,IAAIb,aAAJ,GAAoBgB,OAApB,CAA4BD,YAA5B,CAAd;AACA,MAAMP,MAAM,GAAG,IAAIV,YAAJ,CAAiB;AAC/BmB,IAAAA,GAAG,EAAE,mCAD0B;AAE/BJ,IAAAA,KAAK,EAALA,KAF+B;AAG/BZ,IAAAA,KAAK,EAALA;AAH+B,GAAjB,CAAf;AAMA,SAAOO,MAAP;AACA","sourcesContent":["import ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport fetch from 'isomorphic-unfetch';\n\nexport function withApollo(PageComponent) {\n\tconst WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n\t\tconst client = apolloClient || initApolloClient(apolloState);\n\n\t\treturn (\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<PageComponent {...pageProps} />\n\t\t\t</ApolloProvider>\n\t\t);\n\t};\n\n\tWithApollo.getInicialProps = async (ctx) => {\n\t\tconst { AppTree } = ctx;\n\t\tconst apolloClient = (ctx.apolloClient = initApolloClient);\n\n\t\tlet pageProps = {};\n\n\t\tconst apolloState = apolloClient.cache.extract();\n\n\t\treturn {\n\t\t\t...pageProps,\n\t\t\tapolloState,\n\t\t};\n\t};\n\n\treturn WithApollo;\n}\n\nfunction initApolloClient(initialState = {}) {\n\tconst cache = new InMemoryCache().restore(initialState);\n\tconst client = new ApolloClient({\n\t\turi: 'http://localhost:3000/api/graphql',\n\t\tcache,\n\t\tfetch,\n\t});\n\n\treturn client;\n}\n"]},"metadata":{},"sourceType":"module"}